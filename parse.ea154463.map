{"version":3,"sources":["minihtml.ts","parse.tsx"],"names":[],"mappings":"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","file":"parse.ea154463.map","sourceRoot":"..","sourcesContent":["declare global {\n\tnamespace JSX {\n\t\tinterface IntrinsicElements {\n\t\t\t[name: string]: any;\n\t\t}\n\t}\n}\n\nexport function createElement(\n\ttag: string,\n\tprops: { [name: string]: string | number } | undefined,\n\t...children: string[]\n) {\n\treturn `<${tag}${Object.entries(props || {})\n\t\t.map(([k, v]) => ` ${k}=\"${v}\"`)\n\t\t.join(\"\")}>${children.flat(Infinity).join(\"\")}</${tag}>`;\n}\n","import * as React from \"./minihtml\";\n\nfunction progress(text: string) {\n\ttarget.textContent = text;\n}\ndocument.body.addEventListener(\"dragover\", ev => {\n\tev.preventDefault();\n\tif (!ev.dataTransfer) throw Error(`no dataTransfer`);\n\tev.dataTransfer.dropEffect = \"move\";\n\tdocument.body.style.backgroundColor = \"green\";\n});\ndocument.body.addEventListener(\"drop\", ev => {\n\tdocument.body.style.backgroundColor = \"initial\";\n\tev.preventDefault();\n\tif (!ev.dataTransfer) throw Error(`no dataTransfer`);\n\tconst f = ev.dataTransfer.files[0];\n\tif (!f) throw \"no file\";\n\tparseFromFile(f);\n});\n\nfunction parseFromFile(f: File) {\n\tconst url = URL.createObjectURL(f);\n\tconsole.log(url);\n\tconst req = new XMLHttpRequest();\n\treq.addEventListener(\"load\", ev => {\n\t\tprogress(\"parsed html.\");\n\t\tparseDocument(req.response);\n\t});\n\treq.responseType = \"document\";\n\treq.overrideMimeType(\"text/html\");\n\treq.open(\"GET\", url);\n\treq.send();\n\tconsole.time(\"parse\");\n\tprogress(\"parsing html...\");\n}\n\nfunction groupBy<T, K, T2 = T>(ts: T[], getKey: (t: T) => K, getValue: (t: T) => T2) {\n\tconst m = new Map<K, T2[]>();\n\tfor (const t of ts) {\n\t\tconst k = getKey(t);\n\t\tif (!m.has(k)) m.set(k, []);\n\t\tconst arr = m.get(k)!;\n\t\tarr.push(getValue(t));\n\t}\n\treturn Array.from(m.entries());\n}\n\nfunction normalize(x: string) {\n\treturn x.replace(/[\\t\\n\\r ]+/g, \" \").trim();\n}\n\nasync function parseDocument(doc: Document) {\n\tprogress(\"aggregating...\");\n\tawait new Promise(requestAnimationFrame);\n\n\tconsole.log({ doc });\n\tlet fail = 0;\n\n\tconst all = [];\n\tfor (const oc of doc.querySelectorAll(\"div.outer-cell\")) {\n\t\tconst c = oc.querySelector(\".content-cell\");\n\t\tconst [video, channel] = c.querySelectorAll(\"a\");\n\t\tif (!video || !channel) {\n\t\t\tfail++;\n\t\t\tcontinue;\n\t\t}\n\t\tconst [vurl, curl] = [video.href, channel.href];\n\t\tconst [vname, cname] = [normalize(video.textContent!), normalize(channel.textContent!)];\n\n\t\tall.push({\n\t\t\tchannel: {\n\t\t\t\tname: cname,\n\t\t\t\tid: curl\n\t\t\t},\n\t\t\tvideo: {\n\t\t\t\tname: vname,\n\t\t\t\tid: vurl\n\t\t\t}\n\t\t});\n\t}\n\tconsole.log(\"failures: \", fail);\n\tconst agg = groupBy(all, t => t.channel.id, t => t);\n\tconst sortAgg = (a: [any, any[]], b: [any, any[]]) => b[1].length - a[1].length;\n\tagg.sort(sortAgg);\n\tconst n = 100;\n\tdocument.querySelector(\"div\")!.innerHTML = (\n\t\t<>\n\t\t\t<h2>Top {n} channels watched</h2>\n\t\t\t<ol>\n\t\t\t\t{agg.slice(0, n).map(([c, vs]) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<details>\n\t\t\t\t\t\t\t\t<summary>\n\t\t\t\t\t\t\t\t\t<a href={c}>{[...new Set(vs.map(x => x.channel.name))]}</a>: {vs.length} videos\n\t\t\t\t\t\t\t\t</summary>\n\t\t\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t\t\t{groupBy(vs, v => v.video.id, v => v.video)\n\t\t\t\t\t\t\t\t\t\t.sort(sortAgg)\n\t\t\t\t\t\t\t\t\t\t.map(([id, v]) => (\n\t\t\t\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t\t\t\t<a href={id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{v.length}\n\t\t\t\t\t\t\t\t\t\t\t\t\tx: {v[0].name}\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t</details>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</ol>\n\t\t</>\n\t);\n}\n"]}